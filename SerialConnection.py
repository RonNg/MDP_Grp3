#!/usr/bin/env python3
import serial
import time

class SerialConnection(object):
	def __init__(self):
		self.isConnected = False

	def setup(self):
		try:
			self.port = '/dev/ttyACM0'	#change to the device driver id
			self.b_rate = 9600			#standard baud rate
		except Exception as e:
			print('Serial Setup error: ', str(e))
		
	def connect(self):
		self.setup()
		try:
			self.ser = serial.Serial(self.port,self.b_rate)
			print('Serial Connected')
			self.isConnected=True
		except Exception as e:
			print ('Serial Connection connect error. Reconnecting ', str(e))
			self.connect()
			
	def read(self):
		try:
			readMsg = self.ser.readline()
			#clear \r\n generated by apps
			#readMsg = str(readMsg).replace('\n','')
			#readMsg = str(readMsg).replace('\r','')
			readMsg = readMsg.decode()
			readMsg = str(readMsg).replace('\n','')
			readMsg = str(readMsg).replace('\r','')
			return readMsg
		except Exception as e:
			print('Serial Read Error: ', str(e))
			self.connect()
			
	def write(self,strMsg):
		try:
			#strMsg = str(strMsg)
			#strMsg = strMsg.replace('\n','')
			#strMsg = strMsg.replace('\r','')
			strMsg+='\n'
			#print('Serial Write: %s'% str(strMsg))
			self.ser.write(strMsg.encode())
			self.ser.flush()
		except Exception as e:
			print('Serial Write Error: ',str(e))
			self.connect()
	
	def close(self):
		try:
			if(self.ser):
				self.ser.close()
				print('Serial Connection Close')
				self.isConnected = False
		except Exception as e:
			print('Error in Closing Serial Connection', str(e))
			
if __name__ == "__main__" :
	ser = SerialConnection()
	ser.__init__()
	ser.connect()
	#compulsary sleep for 2 seconds
	time.sleep(2)
	if(ser.isConnected):
		while True:
			try: 
				print("Input some text for Arduino")
				writeToArduino = raw_input()
				ser.write((writeToArduino))
				recvMsg = ser.read()
				print(recvMsg)
			except KeyboardInterrupt:
				print('Serial Connection Interrupted')
				break
		ser.close()
			
